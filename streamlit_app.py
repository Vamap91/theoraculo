"""
OR√ÅCULO - An√°lise Inteligente de Documentos do SharePoint
Aplica√ß√£o principal adaptada para estrutura hier√°rquica do Guia R√°pido da Carglass.
"""

import os
import tempfile
import platform
import streamlit as st
import requests
import io
import traceback
from PIL import Image, ImageEnhance, ImageFilter
import pytesseract
import time
from openai import OpenAI
import numpy as np

# Configura√ß√£o para o Poppler (necess√°rio para PDFs) - SOLU√á√ÉO DO ERRO
if platform.system() == "Windows":
    # Adiciona alguns caminhos comuns do Poppler ao PATH
    possible_poppler_paths = [
        r"C:\poppler\bin",
        r"C:\Program Files\poppler\bin",
        r"C:\Program Files (x86)\poppler\bin",
        r"C:\Users\Administrator\AppData\Local\Programs\poppler\bin"
    ]
    
    for path in possible_poppler_paths:
        if os.path.exists(path):
            os.environ["PATH"] = path + os.pathsep + os.environ["PATH"]
            break

# Tenta importar o m√≥dulo PyMuPDF primeiro (priorit√°rio)
try:
    import fitz  # PyMuPDF
    pdf_processor = "pymupdf"
except ImportError:
    pdf_processor = None
    st.warning("PyMuPDF n√£o est√° instalado. Tentando alternativa...")

# Se PyMuPDF falhar, tenta usar pdf2image
if pdf_processor is None:
    try:
        import pdf2image
        pdf_processor = "pdf2image"
    except ImportError:
        pdf_processor = None
        st.error("Nenhum processador de PDF dispon√≠vel. Instale pymupdf ou pdf2image.")

# Tenta importar python-magic para detec√ß√£o de tipos de arquivo
try:
    import magic
    has_magic = True
except ImportError:
    has_magic = False

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Or√°culo - SharePoint com IA", 
    page_icon="üîÆ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configura√ß√µes
GRAPH_ROOT = "https://graph.microsoft.com/v1.0"
SITE_ID = "carglassbr.sharepoint.com,7d0ecc3f-b6c8-411d-8ae4-6d5679a38ca8,e53fc2d9-95b5-4675-813d-769b7a737286"
DATA_DIR = "data"

# Verifica e cria o diret√≥rio para armazenar os arquivos, se n√£o existir
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

# T√≠tulo e descri√ß√£o
st.title("üîÆ Or√°culo - An√°lise Inteligente de Documentos do SharePoint")
st.markdown("""
Este sistema acessa bibliotecas do SharePoint, extrai texto de documentos visuais e 
permite consultas em linguagem natural usando IA.
""")

# Bot√£o para limpar cache e reiniciar
if st.button("üßπ Limpar cache e reiniciar"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# Configura√ß√£o do OCR e caminhos
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    
    # Configura√ß√£o do OCR
    st.subheader("Configura√ß√£o do OCR")
    ocr_language = st.selectbox(
        "Idioma principal para OCR:",
        options=["por", "por+eng", "eng"],
        index=1,
        help="Selecione o idioma principal dos documentos"
    )
    
    # Configura√ß√£o de pr√©-processamento de imagem
    st.subheader("Pr√©-processamento de imagem")
    use_preprocessing = st.checkbox("Aplicar pr√©-processamento de imagem", value=True,
                                    help="Melhora a qualidade do OCR em imagens")
    
    # Exibe op√ß√µes avan√ßadas se o pr√©-processamento estiver ativado
    if use_preprocessing:
        preprocessing_options = st.multiselect(
            "T√©cnicas de pr√©-processamento:",
            options=["Aumentar contraste", "Escala de cinza", "Nitidez", "Remover ru√≠do"],
            default=["Aumentar contraste", "Escala de cinza", "Nitidez"]
        )
    
    # Configura√ß√£o do modelo de IA
    st.subheader("Configura√ß√£o da IA")
    ai_model = st.selectbox(
        "Modelo OpenAI:",
        options=["gpt-3.5-turbo", "gpt-4"],
        index=0
    )
    
    st.divider()
    
    # Verifica o status do sistema
    st.subheader("Status do Sistema")
    
    # Verifica Tesseract OCR
    try:
        tesseract_version = pytesseract.get_tesseract_version()
        st.success(f"‚úÖ Tesseract OCR v{tesseract_version} instalado")
    except:
        st.error("‚ùå Tesseract OCR n√£o encontrado")
    
    # Verifica processador de PDF
    if pdf_processor == "pymupdf":
        st.success("‚úÖ PyMuPDF est√° sendo usado para PDFs")
    elif pdf_processor == "pdf2image":
        try:
            pdf2image.pdfinfo_from_bytes(b"%PDF-1.0\n1 0 obj<</Pages 2 0 R>>/endobj/trailer<</Root 1 0 R>>")
            st.success("‚úÖ Poppler est√° instalado corretamente")
        except Exception as e:
            st.error(f"‚ö†Ô∏è Poppler n√£o est√° configurado corretamente")
    else:
        st.error("‚ùå Nenhum processador de PDF dispon√≠vel")
    
    # Informa√ß√µes do projeto
    st.markdown("### üìã Sobre o Projeto")
    st.markdown("""
    **Or√°culo** √© uma ferramenta que:
    - Conecta ao SharePoint via Microsoft Graph API
    - Baixa documentos visuais (principalmente imagens)
    - Extrai texto via OCR
    - Responde perguntas usando IA
    """)

# Cache para o token
@st.cache_resource(ttl=3500)  # Quase 1 hora, tokens geralmente expiram em 1h
def get_graph_token():
    """Obt√©m token de autentica√ß√£o para a Microsoft Graph API"""
    try:
        tenant_id = st.secrets["TENANT_ID"]
        client_id = st.secrets["CLIENT_ID"]
        client_secret = st.secrets["CLIENT_SECRET"]
        url = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"

        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        data = {
            "client_id": client_id,
            "scope": "https://graph.microsoft.com/.default",
            "client_secret": client_secret,
            "grant_type": "client_credentials"
        }

        response = requests.post(url, headers=headers, data=data, timeout=30)
        if response.status_code == 200:
            return response.json().get("access_token")
        else:
            st.error(f"Erro ao gerar token de acesso: {response.status_code}")
            if st.checkbox("Mostrar detalhes do erro", value=False):
                st.code(response.text)
            return None
            
    except KeyError as e:
        st.error(f"Erro de configura√ß√£o: chave n√£o encontrada em st.secrets: {str(e)}")
        st.info("Verifique se as credenciais de autentica√ß√£o est√£o configuradas corretamente.")
        return None
        
    except Exception as e:
        st.error(f"Erro durante a autentica√ß√£o: {str(e)}")
        return None

def listar_bibliotecas(token):
    """Lista todas as bibliotecas do SharePoint"""
    headers = {"Authorization": f"Bearer {token}"}
    url = f"{GRAPH_ROOT}/sites/{SITE_ID}/drives"
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code == 200:
            return response.json().get("value", [])
        else:
            st.error(f"‚ùå Erro ao listar bibliotecas: {response.status_code}")
            st.code(response.text)
            return []
    except Exception as e:
        st.error(f"Erro ao listar bibliotecas: {str(e)}")
        return []

def listar_todos_os_arquivos(token, drive_id, caminho_pasta="/", progress_bar=None, limite=None):
    """Lista todos os arquivos em uma biblioteca, incluindo subpastas"""
    headers = {"Authorization": f"Bearer {token}"}
    if caminho_pasta == "/":
        url = f"{GRAPH_ROOT}/drives/{drive_id}/root/children"
    else:
        url = f"{GRAPH_ROOT}/drives/{drive_id}/root:{caminho_pasta}:/children"

    arquivos = []
    try:
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code == 200:
            itens = response.json().get("value", [])
            
            # Atualiza a barra de progresso, se fornecida
            if progress_bar:
                progress_bar.progress(0.1, text="Iniciando busca...")
            
            for i, item in enumerate(itens):
                # Aplica o limite, se especificado
                if limite and len(arquivos) >= limite:
                    break
                    
                if item.get("folder"):
                    nova_pasta = f"{caminho_pasta}/{item['name']}".replace("//", "/")
                    # Adiciona n√≠vel hier√°rquico √† pasta
                    nivel = nova_pasta.count('/')
                    item['_nivel_hierarquico'] = nivel
                    
                    sub_arquivos = listar_todos_os_arquivos(token, drive_id, nova_pasta, limite=limite)
                    arquivos.extend(sub_arquivos)
                else:
                    # Adiciona n√≠vel hier√°rquico aos arquivos
                    nivel = caminho_pasta.count('/')
                    item['_nivel_hierarquico'] = nivel
                    item['_caminho_pasta'] = caminho_pasta
                    arquivos.append(item)
                
                # Atualiza a barra de progresso
                if progress_bar:
                    progress = min(0.1 + 0.8 * (i / len(itens)), 0.9)
                    progress_bar.progress(progress, text=f"Processando pasta {caminho_pasta}...")
        else:
            st.warning(f"Erro ao listar arquivos em {caminho_pasta}: {response.status_code}")
            if response.status_code != 404:  # Ignora erros 404 (pasta n√£o encontrada)
                st.code(response.text)
    except Exception as e:
        st.error(f"Erro ao listar arquivos: {str(e)}")
    
    # Finaliza a barra de progresso
    if progress_bar and caminho_pasta == "/":
        progress_bar.progress(1.0, text="Busca conclu√≠da!")
        time.sleep(0.5)
        progress_bar.empty()
    
    return arquivos

def baixar_arquivo(token, download_url, nome_arquivo, caminho_pasta="/", pasta_destino=DATA_DIR):
    """Baixa um √∫nico arquivo e retorna o caminho local"""
    headers = {"Authorization": f"Bearer {token}"}
    # Preserva a informa√ß√£o do caminho da pasta no nome do arquivo
    nome_arquivo_salvo = f"{caminho_pasta.replace('/', '_')}_{nome_arquivo}" if caminho_pasta != "/" else nome_arquivo
    nome_arquivo_salvo = nome_arquivo_salvo.replace(':', '_').replace('?', '_').replace('*', '_')
    
    caminho_local = os.path.join(pasta_destino, nome_arquivo_salvo)
    
    try:
        response = requests.get(download_url, headers=headers, timeout=30)
        if response.status_code == 200:
            # Salva o arquivo localmente
            with open(caminho_local, "wb") as f:
                f.write(response.content)
            return caminho_local, response.content, caminho_pasta
        else:
            st.warning(f"Erro ao baixar {nome_arquivo}: {response.status_code}")
            return None, None, None
    except Exception as e:
        st.warning(f"Erro ao baixar {nome_arquivo}: {str(e)}")
        return None, None, None

def pre_processar_imagem(img):
    """Aplica t√©cnicas de pr√©-processamento para melhorar a qualidade do OCR"""
    if not use_preprocessing:
        return img
    
    # Converte para RGB se tiver canal alpha
    if img.mode == 'RGBA':
        img = img.convert('RGB')
    
    # Aplica as t√©cnicas selecionadas
    if "Escala de cinza" in preprocessing_options:
        img = img.convert('L')
    
    if "Aumentar contraste" in preprocessing_options:
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(2.0)
    
    if "Remover ru√≠do" in preprocessing_options:
        img = img.filter(ImageFilter.MedianFilter(size=3))
    
    if "Nitidez" in preprocessing_options:
        img = img.filter(ImageFilter.SHARPEN)
    
    return img

def extrair_texto_de_imagem(img_data_or_path, nivel_hierarquico=0, caminho_pasta="/"):
    """Extrai texto de uma imagem usando OCR"""
    try:
        # Se for um caminho para arquivo
        if isinstance(img_data_or_path, str):
            if not os.path.exists(img_data_or_path):
                return ""
            img = Image.open(img_data_or_path)
            
            # Extrai o nome do arquivo para an√°lise
            nome_arquivo = os.path.basename(img_data_or_path)
        # Se for conte√∫do bin√°rio
        elif isinstance(img_data_or_path, bytes):
            img = Image.open(io.BytesIO(img_data_or_path))
            nome_arquivo = "arquivo_binario.png"
        # Se j√° for um objeto PIL Image
        elif isinstance(img_data_or_path, Image.Image):
            img = img_data_or_path
            nome_arquivo = "imagem.png"
        else:
            return ""
        
        # Aplica pr√©-processamento para melhorar a qualidade do OCR
        img = pre_processar_imagem(img)
            
        # Extrai o texto usando pytesseract
        texto = pytesseract.image_to_string(img, lang=ocr_language)
        texto_limpo = texto.strip() if texto else "[imagem sem texto leg√≠vel]"
        
        # Adiciona informa√ß√µes de contexto hier√°rquico
        if nivel_hierarquico > 0 or caminho_pasta != "/":
            prefixo = f"[N√≠vel {nivel_hierarquico}]"
            if caminho_pasta != "/":
                prefixo += f" [Caminho: {caminho_pasta}]"
                
            # Identifica menus e bot√µes baseados no nome do arquivo e conte√∫do
            if "guia" in nome_arquivo.lower() and "pratico" in nome_arquivo.lower():
                prefixo += " [Menu: Guia Pr√°tico]"
            elif "comunicado" in texto_limpo.lower():
                prefixo += " [Tipo: Comunicado]"
                
            texto_limpo = f"{prefixo}\n{texto_limpo}"
        
        return texto_limpo
    except Exception as e:
        st.error(f"Erro ao processar imagem com OCR: {str(e)}")
        return f"[erro ao processar imagem: {str(e)}]"

def extrair_texto_de_pdf_com_pymupdf(pdf_data_or_path, nivel_hierarquico=0, caminho_pasta="/"):
    """Extrai texto de um PDF usando PyMuPDF (alternativa ao Poppler)"""
    try:
        import fitz  # PyMuPDF
        
        # Se for um caminho para arquivo
        if isinstance(pdf_data_or_path, str):
            if not os.path.exists(pdf_data_or_path):
                return ""
            # Extrai o nome do arquivo para an√°lise
            nome_arquivo = os.path.basename(pdf_data_or_path)
            doc = fitz.open(pdf_data_or_path)
        # Se for conte√∫do bin√°rio
        elif isinstance(pdf_data_or_path, bytes):
            nome_arquivo = "arquivo_binario.pdf"
            doc = fitz.open(stream=pdf_data_or_path, filetype="pdf")
        else:
            return ""
        
        # Extrai texto de cada p√°gina
        textos = []
        for i in range(len(doc)):
            page = doc[i]
            
            # Tenta extrair texto diretamente
            texto = page.get_text()
            
            # Se a p√°gina tiver texto
            if texto.strip():
                textos.append(f"--- P√°gina {i+1} ---\n{texto}")
            else:
                # Se n√£o houver texto, extrai como imagem e aplica OCR
                pix = page.get_pixmap(matrix=fitz.Matrix(300/72, 300/72))
                
                # Converte para PIL Image
                img_data = pix.tobytes("ppm")
                img = Image.open(io.BytesIO(img_data))
                
                # Aplica OCR na imagem
                texto_ocr = extrair_texto_de_imagem(img)
                if texto_ocr and texto_ocr != "[imagem sem texto leg√≠vel]":
                    textos.append(f"--- P√°gina {i+1} (OCR) ---\n{texto_ocr}")
        
        # Combina o texto de todas as p√°ginas
        texto_combinado = "\n\n".join(textos) if textos else "[PDF sem texto leg√≠vel]"
        
        # Adiciona informa√ß√µes de contexto hier√°rquico
        if nivel_hierarquico > 0 or caminho_pasta != "/":
            prefixo = f"[N√≠vel {nivel_hierarquico}]"
            if caminho_pasta != "/":
                prefixo += f" [Caminho: {caminho_pasta}]"
                
            # Identifica tipos de documento baseados no nome
            if "guia" in nome_arquivo.lower():
                prefixo += " [Tipo: Guia]"
            elif "comunicado" in nome_arquivo.lower():
                prefixo += " [Tipo: Comunicado]"
                
            texto_combinado = f"{prefixo}\n{texto_combinado}"
        
        return texto_combinado
    except Exception as e:
        st.error(f"Erro ao processar PDF com PyMuPDF: {str(e)}")
        return f"[erro ao processar PDF: {str(e)}]"

def extrair_texto_de_pdf_com_pdf2image(pdf_data_or_path, nivel_hierarquico=0, caminho_pasta="/"):
    """Extrai texto de um PDF usando pdf2image e OCR"""
    try:
        # Se for um caminho para arquivo
        if isinstance(pdf_data_or_path, str):
            if not os.path.exists(pdf_data_or_path):
                return ""
            nome_arquivo = os.path.basename(pdf_data_or_path)
            with open(pdf_data_or_path, 'rb') as f:
                pdf_data = f.read()
        # Se for conte√∫do bin√°rio
        elif isinstance(pdf_data_or_path, bytes):
            pdf_data = pdf_data_or_path
            nome_arquivo = "arquivo_binario.pdf"
        else:
            return ""
        
        # Cria um arquivo tempor√°rio para o PDF
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf:
            temp_pdf.write(pdf_data)
            temp_pdf_path = temp_pdf.name
        
        try:
            # Converte PDF para imagens
            imagens = pdf2image.convert_from_path(temp_pdf_path, dpi=300)
        except Exception as e:
            os.unlink(temp_pdf_path)
            # Se falhar com Poppler, tenta processar diretamente como imagem
            if "Unable to get page count" in str(e):
                st.info("Tentando processar o PDF como imagem devido a problemas com o Poppler.")
                try:
                    return extrair_texto_de_imagem(pdf_data, nivel_hierarquico, caminho_pasta)
                except:
                    pass
            return f"[erro ao processar PDF: {str(e)}]"
        
        # Remove o arquivo tempor√°rio
        os.unlink(temp_pdf_path)
        
        # Extrai texto de cada p√°gina
        textos = []
        for i, img in enumerate(imagens):
            texto_pagina = extrair_texto_de_imagem(img)
            if texto_pagina and texto_pagina != "[imagem sem texto leg√≠vel]":
                textos.append(f"--- P√°gina {i+1} ---\n{texto_pagina}")
        
        # Combina o texto de todas as p√°ginas
        texto_combinado = "\n\n".join(textos) if textos else "[PDF sem texto leg√≠vel]"
        
        # Adiciona informa√ß√µes de contexto hier√°rquico
        if nivel_hierarquico > 0 or caminho_pasta != "/":
            prefixo = f"[N√≠vel {nivel_hierarquico}]"
            if caminho_pasta != "/":
                prefixo += f" [Caminho: {caminho_pasta}]"
                
            # Identifica tipos de documento baseados no nome
            if "guia" in nome_arquivo.lower():
                prefixo += " [Tipo: Guia]"
            elif "comunicado" in nome_arquivo.lower():
                prefixo += " [Tipo: Comunicado]"
                
            texto_combinado = f"{prefixo}\n{texto_combinado}"
            
        return texto_combinado
    except Exception as e:
        st.error(f"Erro ao processar PDF com pdf2image: {str(e)}")
        return f"[erro ao processar PDF: {str(e)}]"

def detectar_tipo_arquivo(conteudo_binario):
    """Detecta o tipo MIME de um arquivo usando python-magic, se dispon√≠vel"""
    if has_magic and isinstance(conteudo_binario, bytes):
        try:
            return magic.from_buffer(conteudo_binario, mime=True)
        except:
            pass
    return None

def extrair_texto_de_arquivo(caminho_ou_conteudo, nome_arquivo=None, nivel_hierarquico=0, caminho_pasta="/"):
    """Extrai texto de um arquivo com detec√ß√£o inteligente de formato"""
    # Determina a extens√£o e o nome do arquivo
    if isinstance(caminho_ou_conteudo, str) and os.path.exists(caminho_ou_conteudo):
        nome = os.path.basename(caminho_ou_conteudo).lower()
    else:
        nome = nome_arquivo.lower() if nome_arquivo else ""
    
    # Detecta o tipo real do arquivo, se poss√≠vel
    mime_type = None
    if isinstance(caminho_ou_conteudo, bytes):
        mime_type = detectar_tipo_arquivo(caminho_ou_conteudo)
    
    # Define a estrat√©gia com base no tipo MIME ou extens√£o
    if mime_type:
        if 'image' in mime_type:
            return extrair_texto_de_imagem(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
        elif 'pdf' in mime_type:
            if pdf_processor == "pymupdf":
                return extrair_texto_de_pdf_com_pymupdf(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
            else:
                return extrair_texto_de_pdf_com_pdf2image(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
        elif 'text' in mime_type:
            # Extrai texto de arquivos de texto
            try:
                if isinstance(caminho_ou_conteudo, bytes):
                    texto = caminho_ou_conteudo.decode('utf-8', errors='ignore')
                else:
                    with open(caminho_ou_conteudo, 'r', encoding='utf-8', errors='ignore') as f:
                        texto = f.read()
                
                # Adiciona informa√ß√µes de contexto hier√°rquico
                if nivel_hierarquico > 0 or caminho_pasta != "/":
                    prefixo = f"[N√≠vel {nivel_hierarquico}]"
                    if caminho_pasta != "/":
                        prefixo += f" [Caminho: {caminho_pasta}]"
                    texto = f"{prefixo}\n{texto}"
                
                return texto
            except Exception as e:
                return f"[erro ao ler arquivo de texto: {str(e)}]"
    else:
        # Determina o tipo baseado na extens√£o do arquivo
        if nome.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
            return extrair_texto_de_imagem(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
        elif nome.endswith('.pdf'):
            # Tenta primeiro com o processador de PDF configurado
            try:
                if pdf_processor == "pymupdf":
                    return extrair_texto_de_pdf_com_pymupdf(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
                else:
                    return extrair_texto_de_pdf_com_pdf2image(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
            except Exception as e:
                # Se falhar, tenta processar como imagem
                st.warning(f"Erro ao processar PDF, tentando como imagem: {str(e)}")
                return extrair_texto_de_imagem(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
        elif nome.endswith(('.txt', '.csv', '.md')):
            # Extrai texto de arquivos de texto
            try:
                if isinstance(caminho_ou_conteudo, str) and os.path.exists(caminho_ou_conteudo):
                    with open(caminho_ou_conteudo, 'r', encoding='utf-8', errors='ignore') as f:
                        texto = f.read()
                elif isinstance(caminho_ou_conteudo, bytes):
                    texto = caminho_ou_conteudo.decode('utf-8', errors='ignore')
                else:
                    return "[formato de arquivo n√£o suportado]"
                
                # Adiciona informa√ß√µes de contexto hier√°rquico
                if nivel_hierarquico > 0 or caminho_pasta != "/":
                    prefixo = f"[N√≠vel {nivel_hierarquico}]"
                    if caminho_pasta != "/":
                        prefixo += f" [Caminho: {caminho_pasta}]"
                    texto = f"{prefixo}\n{texto}"
                
                return texto
            except Exception as e:
                return f"[erro ao ler arquivo de texto: {str(e)}]"
        else:
            # Para extens√µes desconhecidas, tenta primeiro como imagem
            try:
                return extrair_texto_de_imagem(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
            except:
                # Se falhar, tenta como PDF
                try:
                    if pdf_processor == "pymupdf":
                        return extrair_texto_de_pdf_com_pymupdf(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
                    else:
                        return extrair_texto_de_pdf_com_pdf2image(caminho_ou_conteudo, nivel_hierarquico, caminho_pasta)
                except:
                    pass
    
    # Se todas as tentativas falharem
    return f"[n√£o foi poss√≠vel extrair texto do formato: {nome}]"

def extrair_info_contexto(texto):
    """Extrai informa√ß√µes de contexto do texto processado"""
    nivel = 0
    caminho = "/"
    tipo = "Desconhecido"
    menu = ""
    
    # Extrai informa√ß√µes das tags de contexto
    if "[N√≠vel " in texto:
        try:
            nivel_str = texto.split("[N√≠vel ")[1].split("]")[0]
            nivel = int(nivel_str)
        except:
            pass
    
    if "[Caminho: " in texto:
        try:
            caminho = texto.split("[Caminho: ")[1].split("]")[0]
        except:
            pass
    
    if "[Tipo: " in texto:
        try:
            tipo = texto.split("[Tipo: ")[1].split("]")[0]
        except:
            pass
    
    if "[Menu: " in texto:
        try:
            menu = texto.split("[Menu: ")[1].split("]")[0]
        except:
            pass
    
    return {
        "nivel": nivel,
        "caminho": caminho,
        "tipo": tipo,
        "menu": menu
    }

def processar_pergunta(pergunta, conteudo_extraido, modelo_ia="gpt-3.5-turbo"):
    """Processa uma pergunta considerando a estrutura hier√°rquica dos dados"""
    try:
        # Organiza o conte√∫do por n√≠veis hier√°rquicos
        conteudo_por_nivel = {}
        info_contextual = []
        
        for i, texto in enumerate(conteudo_extraido):
            # Extrai informa√ß√µes de contexto
            info = extrair_info_contexto(texto)
            info["indice"] = i
            info["texto"] = texto
            info_contextual.append(info)
            
            # Agrupa por n√≠vel hier√°rquico
            nivel = info["nivel"]
            if nivel not in conteudo_por_nivel:
                conteudo_por_nivel[nivel] = []
            conteudo_por_nivel[nivel].append(texto)
        
        # Ordena os n√≠veis hier√°rquicos
        niveis_ordenados = sorted(conteudo_por_nivel.keys())
        
        # Monta o contexto hier√°rquico ordenado
        contexto_ordenado = []
        for nivel in niveis_ordenados:
            contexto_ordenado.extend(conteudo_por_nivel[nivel])
        
        # Se n√£o tiver estrutura hier√°rquica, usa o conte√∫do original
        if not contexto_ordenado:
            contexto_ordenado = conteudo_extraido
        
        # Junta o conte√∫do com separadores claros
        contexto = "\n\n---DOCUMENTO HIER√ÅRQUICO---\n\n".join(contexto_ordenado)
        
        # Prepara informa√ß√µes adicionais de contexto para melhorar a resposta da IA
        info_adicional = "Informa√ß√µes sobre a estrutura hier√°rquica dos documentos:\n"
        for nivel in niveis_ordenados:
            num_docs = len(conteudo_por_nivel[nivel])
            info_adicional += f"- N√≠vel {nivel}: {num_docs} documento(s)\n"
        
        # Agrupa tamb√©m por tipo de documento
        tipos = {}
        for info in info_contextual:
            tipo = info["tipo"]
            if tipo not in tipos:
                tipos[tipo] = 0
            tipos[tipo] += 1
        
        for tipo, contagem in tipos.items():
            if tipo != "Desconhecido":
                info_adicional += f"- Tipo '{tipo}': {contagem} documento(s)\n"
        
        # Identifica poss√≠veis menus e bot√µes
        menus = {}
        for info in info_contextual:
            menu = info["menu"]
            if menu and menu not in menus:
                menus[menu] = 0
            if menu:
                menus[menu] += 1
        
        for menu, contagem in menus.items():
            info_adicional += f"- Menu '{menu}': {contagem} documento(s)\n"
        
        # Monta o prompt para a IA
        prompt = f"""
Voc√™ √© um assistente inteligente especializado em analisar o conte√∫do do SharePoint da Carglass.

INFORMA√á√ïES SOBRE A ESTRUTURA HIER√ÅRQUICA:
Os documentos a seguir t√™m uma estrutura hier√°rquica com m√∫ltiplos n√≠veis:
- N√≠vel 1: Menu principal com bot√µes e op√ß√µes como "Guia R√°pido"
- N√≠vel 2: Subcategorias com bot√µes como "Seguradoras", "Assist√™ncias", etc.
- N√≠vel 3: Conte√∫do detalhado com procedimentos, contatos e informa√ß√µes espec√≠ficas

{info_adicional}

CONTEXTO DOS DOCUMENTOS:
{contexto}

INSTRU√á√ïES:
1. Baseie sua resposta EXCLUSIVAMENTE nas informa√ß√µes contidas nos documentos fornecidos.
2. Considere a estrutura hier√°rquica ao responder, indicando de qual se√ß√£o/n√≠vel a informa√ß√£o veio.
3. Se a informa√ß√£o n√£o estiver presente nos documentos, responda claramente: "N√£o encontrei essa informa√ß√£o nos documentos fornecidos."
4. Se os documentos contiverem informa√ß√µes parciais, informe quais partes voc√™ encontrou e quais est√£o faltando.
5. Forne√ßa a resposta de forma clara, concisa e estruturada.
6. Quando aplic√°vel, mencione o caminho de navega√ß√£o para encontrar as informa√ß√µes no sistema original.

PERGUNTA DO USU√ÅRIO: {pergunta}
"""

        client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        resposta = client.chat.completions.create(
            model=modelo_ia,
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente especializado no sistema de Guia R√°pido da Carglass que responde com base nos documentos fornecidos."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3  # Menor temperatura para respostas mais precisas
        )
        
        return resposta.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"Erro ao processar pergunta com IA: {str(e)}")
        return f"Ocorreu um erro ao processar sua pergunta: {str(e)}"

# In√≠cio da aplica√ß√£o principal
token = get_graph_token()
if not token:
    st.error("‚ùå N√£o foi poss√≠vel gerar o token de acesso ao SharePoint.")
    st.info("Verifique se as credenciais est√£o configuradas corretamente nos secrets do Streamlit.")
    st.stop()

# AQUIIIIIIIIIIIIIIIIIII Fun√ß√£o para obter todos os documentos do SharePoint organizados por se√ß√£o
def get_all_site_content(token):
    """Obt√©m todos os arquivos de todas as bibliotecas do site e organiza por se√ß√£o"""
    documentos_por_secao = {
        "Opera√ß√µes": [],
        "Monitoria": [],
        "Treinamento": [],
        "Acesso R√°pido": [],
        "Outros": []
    }
    
    estrutura_navegacao = {
        'categorias': {}, 
        'arvore_navegacao': {}
    }

    # Busca todas as bibliotecas do site
    bibliotecas = listar_bibliotecas(token)
    
    progresso = st.progress(0.0)
    st.text("Analisando bibliotecas...")
    
    # Para cada biblioteca, exploramos seu conte√∫do
    for idx, biblioteca in enumerate(bibliotecas):
        drive_id = biblioteca.get("id")
        nome_biblioteca = biblioteca.get("name", "Sem Nome")
        
        if not drive_id:
            continue
            
        progress_value = (idx / len(bibliotecas))
        progresso.progress(progress_value)
        st.text(f"Processando biblioteca: {nome_biblioteca}")
        
        # Lista todos os arquivos dessa biblioteca, incluindo subpastas
        arquivos = listar_todos_os_arquivos(token, drive_id)
        
        for arq in arquivos:
            arq['_categoria'] = nome_biblioteca
            
            # Determina a se√ß√£o com base no caminho da pasta e nome
            caminho = arq.get('_caminho_pasta', '/').lower()
            nome_arquivo = arq.get('name', '').lower()
            
            # Determina a se√ß√£o atrav√©s de v√°rias regras
            secao = "Outros"
            
            # Regra 1: Baseada no caminho da pasta
            if "operacao" in caminho or "opera√ß√µes" in caminho or "operacoes" in caminho:
                secao = "Opera√ß√µes"
            elif "monitoria" in caminho:
                secao = "Monitoria"
            elif "treinamento" in caminho:
                secao = "Treinamento"
            elif "acesso" in caminho and "rapido" in caminho:
                secao = "Acesso R√°pido"
            
            # Regra 2: Baseada no nome da biblioteca
            if "operacao" in nome_biblioteca.lower() or "opera√ß√µes" in nome_biblioteca.lower():
                secao = "Opera√ß√µes"
            elif "monitoria" in nome_biblioteca.lower():
                secao = "Monitoria"
            elif "treinamento" in nome_biblioteca.lower():
                secao = "Treinamento"
            elif "acesso" in nome_biblioteca.lower() and "rapido" in nome_biblioteca.lower():
                secao = "Acesso R√°pido"
            
            # Regra 3: Baseada no nome do arquivo
            if "linha de frente" in nome_arquivo or "linha_de_frente" in nome_arquivo or "recontato" in nome_arquivo:
                if "vflr" in nome_arquivo:
                    secao = "Opera√ß√µes"
                elif "rrsm" in nome_arquivo:
                    secao = "Monitoria"
            
            # Regra 4: Verificar se √© um comunicado
            if "comunicado" in nome_arquivo:
                if "linha" in caminho and "frente" in caminho:
                    secao = "Opera√ß√µes"
                elif "recontato" in caminho:
                    secao = "Monitoria"
            
            # Adiciona o arquivo √† se√ß√£o apropriada
            documentos_por_secao[secao].append(arq)
            
            # Atualiza estat√≠sticas
            estrutura_navegacao['categorias'][nome_biblioteca] = estrutura_navegacao['categorias'].get(nome_biblioteca, 0) + 1
            
            # Constr√≥i √°rvore de navega√ß√£o
            caminho_navegacao = caminho.strip("/").split("/")
            arvore = estrutura_navegacao['arvore_navegacao']
            for parte in caminho_navegacao:
                if parte and parte not in arvore:
                    arvore[parte] = {}
                if parte:
                    arvore = arvore[parte]
    
    progresso.progress(1.0)
    st.text("Busca conclu√≠da!")
    
    # Armazena os resultados na session_state
    st.session_state['documentos_por_secao'] = documentos_por_secao
    st.session_state['estrutura_navegacao'] = estrutura_navegacao
    
    # Combina todos os documentos em uma √∫nica lista
    todos_documentos = []
    for docs in documentos_por_secao.values():
        todos_documentos.extend(docs)
    
    return todos_documentos
#AQUIIIIIIIIIIIIIIIIIIII
# Fun√ß√£o para baixar m√∫ltiplos arquivos
def baixar_arquivos(token, arquivos, pasta="data", progress_bar=None, extensoes_validas=None):
    """Baixa m√∫ltiplos arquivos e retorna informa√ß√µes sobre eles"""
    # Define extens√µes padr√£o se n√£o fornecidas
    if extensoes_validas is None:
        extensoes_validas = [".pdf", ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".txt", ".docx"]
        
    # Filtra por extens√µes v√°lidas
    arquivos_para_baixar = []
    for arq in arquivos:
        nome = arq.get("name", "").lower()
        if any(nome.endswith(ext) for ext in extensoes_validas):
            arquivos_para_baixar.append(arq)
    
    # Verifica se h√° arquivos para baixar
    total_arquivos = len(arquivos_para_baixar)
    if total_arquivos == 0:
        st.warning("‚ö†Ô∏è Nenhum arquivo com formato suportado encontrado.")
        return []
    
    # Lista para armazenar informa√ß√µes dos arquivos baixados
    arquivos_baixados = []
    
    # Download dos arquivos
    for i, arq in enumerate(arquivos_para_baixar):
        nome = arq.get("name", "")
        download_url = arq.get("@microsoft.graph.downloadUrl")
        nivel = arq.get("_nivel_hierarquico", 0)
        caminho = arq.get("_caminho_pasta", "/")
        categoria = arq.get("_categoria", "")
        
        if download_url:
            # Atualiza progresso
            if progress_bar:
                progresso = min((i + 1) / total_arquivos, 0.99)
                progress_bar.progress(progresso, text=f"Baixando {i+1}/{total_arquivos}: {nome}")
            
            # Baixa o arquivo
            caminho_local, conteudo_binario, caminho_pasta = baixar_arquivo(
                token, download_url, nome, caminho, pasta
            )
            
            if caminho_local:
                # Adiciona informa√ß√µes para cada arquivo baixado
                arquivo_info = {
                    "nome": nome,
                    "caminho_local": caminho_local,
                    "nivel_hierarquico": nivel,
                    "caminho_pasta": caminho,
                    "categoria": categoria
                }
                
                # Determina o tipo do arquivo
                if nome.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    arquivo_info["tipo"] = "imagem"
                elif nome.lower().endswith('.pdf'):
                    arquivo_info["tipo"] = "pdf"
                elif nome.lower().endswith(('.txt', '.csv')):
                    arquivo_info["tipo"] = "texto"
                else:
                    arquivo_info["tipo"] = "outro"
                
                arquivos_baixados.append(arquivo_info)
    
    # Finaliza progresso
    if progress_bar:
        progress_bar.progress(1.0, text=f"‚úÖ Download conclu√≠do! {len(arquivos_baixados)}/{total_arquivos} arquivos baixados.")
        time.sleep(0.5)
    
    return arquivos_baixados

# Interface principal - s√≥ exibe se estiver autenticado
# Obter todos os documentos do SharePoint organizados por se√ß√£o
if 'documentos_por_secao' not in st.session_state:
    with st.spinner("Conectando ao SharePoint e obtendo todos os documentos..."):
        try:
            # Usar a nova fun√ß√£o para obter todos os documentos organizados por se√ß√£o
            todos_documentos = get_all_site_content(token)
            
            # Verificar se foram encontrados documentos
            if not todos_documentos:
                st.warning("‚ö†Ô∏è Nenhum documento encontrado no SharePoint.")
            else:
                st.success(f"‚úÖ Foram encontrados {len(todos_documentos)} documentos no SharePoint!")
                
                # Adicionar modo de depura√ß√£o expandido
                with st.expander("üîç Detalhes da Estrutura Encontrada", expanded=False):
                    estrutura = st.session_state.get('estrutura_navegacao', {})
                    
                    # Mostrar estat√≠sticas
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("Documentos por Se√ß√£o")
                        for secao, docs in st.session_state.get('documentos_por_secao', {}).items():
                            st.info(f"{secao}: {len(docs)} documentos")
                    
                    with col2:
                        st.subheader("Documentos por Categoria")
                        categorias = estrutura.get('categorias', {})
                        for categoria, count in categorias.items():
                            st.info(f"{categoria}: {count} documentos")
                    
                    # Mostrar √°rvore de navega√ß√£o
                    st.subheader("√Årvore de Navega√ß√£o")
                    st.json(estrutura.get('arvore_navegacao', {}))
        
        except Exception as e:
            st.error(f"‚ùå Erro ao obter documentos: {str(e)}")
            st.code(traceback.format_exc())

# Interface para selecionar se√ß√£o, biblioteca e documentos
if 'documentos_por_secao' in st.session_state:
    # Obter todas as se√ß√µes dispon√≠veis
    secoes = list(st.session_state['documentos_por_secao'].keys())
    
    # Interface com abas para as se√ß√µes principais
    if secoes:
        # Exibir as se√ß√µes como tabs para melhor navega√ß√£o
        tab_secoes = st.tabs(secoes)
        
        # Para cada se√ß√£o, mostrar as bibliotecas e documentos
        for i, secao in enumerate(secoes):
            with tab_secoes[i]:
                st.header(f"üìö {secao}")
                
                # Obter documentos da se√ß√£o atual
                documentos_secao = st.session_state['documentos_por_secao'][secao]
                
                # Agrupar por categoria ou biblioteca para melhor organiza√ß√£o
                categorias = {}
                for doc in documentos_secao:
                    categoria = doc.get('_categoria', 'Geral')
                    if categoria not in categorias:
                        categorias[categoria] = []
                    categorias[categoria].append(doc)
                
                # Interface para selecionar documentos por categoria
                for categoria, docs in categorias.items():
                    with st.expander(f"{categoria} ({len(docs)} documentos)", expanded=True):
                        # Lista de documentos com checkbox para sele√ß√£o
                        selected_docs = []
                        for doc in docs:
                            doc_name = doc.get('name', 'Documento sem nome')
                            doc_path = doc.get('_caminho_pasta', '/')
                            
                            # Cria um identificador √∫nico para o documento
                            doc_id = f"{doc_path}_{doc_name}"
                            
                            if st.checkbox(f"{doc_name}", key=doc_id):
                                selected_docs.append(doc)
                        
                        # Bot√£o para processar os documentos selecionados
                        if selected_docs and st.button(f"üîç Processar {len(selected_docs)} Documentos de {categoria}", key=f"btn_{secao}_{categoria}"):
                            with st.spinner(f"Baixando e extraindo texto de {len(selected_docs)} documento(s)..."):
                                # Baixar os documentos selecionados
                                arquivos_baixados = baixar_arquivos(
                                    token, 
                                    selected_docs, 
                                    pasta="data", 
                                    progress_bar=st.progress(0)
                                )
                                
                                if arquivos_baixados:
                                    st.success(f"‚úÖ {len(arquivos_baixados)} documentos baixados com sucesso!")
                                    
                                    # Processar os arquivos baixados para extrair texto
                                    conteudo_extraido = []
                                    
                                    # Para cada arquivo baixado, extrair o texto
                                    for idx, arquivo in enumerate(arquivos_baixados):
                                        caminho_local = arquivo.get("caminho_local")
                                        tipo = arquivo.get("tipo")
                                        nome = arquivo.get("nome")
                                        nivel_hierarquico = arquivo.get("nivel_hierarquico", 0)
                                        caminho_pasta = arquivo.get("caminho_pasta", "/")
                                        
                                        st.text(f"Processando {idx+1}/{len(arquivos_baixados)}: {nome}")
                                        
                                        # Extrair texto do arquivo
                                        texto = extrair_texto_de_arquivo(
                                            caminho_local, 
                                            nome, 
                                            nivel_hierarquico, 
                                            caminho_pasta
                                        )
                                        
                                        if texto:
                                            conteudo_extraido.append(texto)
                                    
                                    # Salva na session_state
                                    st.session_state['conteudo_extraido'] = conteudo_extraido
                                    
                                    # Mostra amostra do texto extra√≠do
                                    st.subheader("üìù Amostra do Texto Extra√≠do")
                                    for idx, texto in enumerate(conteudo_extraido[:3]):  # Mostra apenas os 3 primeiros
                                        st.markdown(f"**Documento {idx+1}:**")
                                        if texto and len(texto) > 0:
                                            preview = texto[:500] + "..." if len(texto) > 500 else texto
                                            st.code(preview, language="text")
                                        else:
                                            st.info("Este documento n√£o cont√©m texto extra√≠vel.")
                                else:
                                    st.error("‚ùå N√£o foi poss√≠vel baixar os documentos selecionados.")
    else:
        st.warning("Nenhuma se√ß√£o encontrada no SharePoint.")

# Interface para perguntas e respostas
if 'conteudo_extraido' in st.session_state and st.session_state['conteudo_extraido']:
    st.header("ü§ñ Consulte o Or√°culo")
    st.markdown("""
    Fa√ßa perguntas sobre os documentos e o Or√°culo responder√° com base no conte√∫do extra√≠do.
    
    **Exemplos de perguntas:**
    - Quais s√£o os procedimentos para atendimento?
    - Como fazer a busca do cliente?
    - Qual o telefone de contato?
    - Quais assist√™ncias est√£o dispon√≠veis?
    """)
    
    # Campo para a pergunta
    pergunta = st.text_area("Digite sua pergunta:", height=100)
    
    # Bot√£o para processar a pergunta
    if pergunta and st.button("üîÆ Consultar o Or√°culo"):
        with st.spinner("O Or√°culo est√° analisando sua pergunta..."):
            resposta = processar_pergunta(
                pergunta, 
                st.session_state['conteudo_extraido'],
                modelo_ia=ai_model
            )
            
            # Exibe a resposta em um componente especial
            st.markdown("### üí¨ Resposta do Or√°culo:")
            st.markdown(
                f"""<div style="background-color: #f0f8ff; padding: 20px; 
                border-radius: 10px; border-left: 5px solid #4682b4;">
                {resposta}
                </div>""", 
                unsafe_allow_html=True
            )
            
            # Adiciona ao hist√≥rico
            if 'historico' not in st.session_state:
                st.session_state['historico'] = []
            
            # Adiciona ao hist√≥rico (limitado aos √∫ltimos 5)
            st.session_state['historico'].insert(
                0, {"pergunta": pergunta, "resposta": resposta}
            )
            if len(st.session_state['historico']) > 5:
                st.session_state['historico'] = st.session_state['historico'][:5]

# Mostra hist√≥rico de perguntas, se existir
if 'historico' in st.session_state and st.session_state['historico']:
    with st.expander("üìú Hist√≥rico de Consultas", expanded=False):
        for idx, item in enumerate(st.session_state['historico']):
            st.markdown(f"**Pergunta {idx+1}:** {item['pergunta']}")
            st.markdown(
                f"""<div style="background-color: #f5f5f5; padding: 10px; 
                border-radius: 5px; margin-bottom: 15px; font-size: 0.9em;">
                {item['resposta']}
                </div>""", 
                unsafe_allow_html=True
            )

# Verifica√ß√µes diagn√≥sticas
with st.expander("üîß Diagn√≥sticos", expanded=False):
    st.subheader("Verifica√ß√£o do Sistema")
    
    # Tesseract OCR
    try:
        versao = pytesseract.get_tesseract_version()
        st.success(f"‚úÖ Tesseract OCR vers√£o {versao} instalado e configurado.")
        
        try:
            idiomas = pytesseract.get_languages()
            st.info(f"Idiomas dispon√≠veis: {', '.join(idiomas)}")
        except:
            st.warning("N√£o foi poss√≠vel listar os idiomas dispon√≠veis do Tesseract.")
    except Exception as e:
        st.error(f"‚ùå Tesseract OCR n√£o encontrado ou n√£o configurado: {str(e)}")
        st.info("""
        Para instalar o Tesseract OCR:
        
        **Windows:**
        1. Baixe o instalador em https://github.com/UB-Mannheim/tesseract/wiki
        2. Instale e adicione ao PATH
        
        **macOS:**
        ```bash
        brew install tesseract
        ```
        
        **Linux:**
        ```bash
        sudo apt update
        sudo apt install tesseract-ocr
        sudo apt install tesseract-ocr-por  # Para portugu√™s
        ```
        """)
    
    # Processador de PDF
    st.subheader("Processamento de PDF")
    if pdf_processor == "pymupdf":
        st.success("‚úÖ Usando PyMuPDF para processamento de PDFs (recomendado).")
    elif pdf_processor == "pdf2image":
        try:
            pdf2image.pdfinfo_from_bytes(b"%PDF-1.0\n1 0 obj<</Pages 2 0 R>>/endobj/trailer<</Root 1 0 R>>")
            st.success("‚úÖ Poppler est√° instalado e configurado corretamente.")
        except Exception as e:
            st.error(f"‚ùå Poppler n√£o est√° configurado corretamente: {str(e)}")
            st.info("""
            Para instalar o Poppler:
            
            **Windows:**
            1. Baixe em https://github.com/oschwartz10612/poppler-windows/releases/
            2. Extraia e adicione a pasta bin ao PATH
            
            **macOS:**
            ```bash
            brew install poppler
            ```
            
            **Linux:**
            ```bash
            sudo apt install poppler-utils
            ```
            
            **Streamlit Cloud:**
            Crie um arquivo packages.txt na raiz do projeto com o conte√∫do:
            ```
            poppler-utils
            ```
            """)
    else:
        st.error("‚ùå Nenhum processador de PDF dispon√≠vel.")
    
    # Python-magic (opcional)
    st.subheader("Detec√ß√£o de Tipo de Arquivo")
    if has_magic:
        st.success("‚úÖ Python-magic est√° instalado para melhor detec√ß√£o de tipo de arquivo.")
    else:
        st.warning("‚ö†Ô∏è Python-magic n√£o est√° instalado. A detec√ß√£o de tipo de arquivo ser√° limitada √† extens√£o.")
        st.info("""
        Para instalar python-magic:
        
        ```bash
        pip install python-magic
        ```
        
        No Windows tamb√©m √© necess√°rio:
        ```bash
        pip install python-magic-bin
        ```
        """)

# Rodap√©
st.markdown("---")
st.markdown(
    """<div style="text-align: center; color: #666;">
    <p>üîÆ Or√°culo - An√°lise Inteligente de Documentos do SharePoint</p>
    <p style="font-size: 0.8em;">Desenvolvido para an√°lise hier√°rquica do Guia R√°pido da Carglass.</p>
    </div>""",
    unsafe_allow_html=True
)
